From 53f7987eb28c5b6b5a87f73efdfab54b215fad6c Mon Sep 17 00:00:00 2001
From: Auto Configured <auto.configured>
Date: Mon, 2 May 2016 11:48:25 +0900
Subject: [PATCH 1/1] preempt_random_RCPL0027Update


Signed-off-by: Auto Configured <auto.configured>
---
 drivers/char/random.c |   32 ++++++++++++++------------------
 1 files changed, 14 insertions(+), 18 deletions(-)

diff --git a/drivers/char/random.c b/drivers/char/random.c
index dc681d6..37342d1 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -829,13 +829,13 @@ void add_interrupt_randomness(int irq, int irq_flags, __u64 ip)
 		return;
 
 	r = nonblocking_pool.initialized ? &input_pool : &nonblocking_pool;
-#ifndef CONFIG_PREEMPT_RT_FULL
 	if (!spin_trylock(&r->lock)) {
 		fast_pool->count--;
 		return;
 	}
 	fast_pool->last = now;
 	__mix_pool_bytes(r, &fast_pool->pool, sizeof(fast_pool->pool), NULL);
+
 	/*
 	 * If we have architectural seed generator, produce a seed and
 	 * add it to the pool.  For the sake of paranoia count it as
@@ -846,10 +846,6 @@ void add_interrupt_randomness(int irq, int irq_flags, __u64 ip)
 		credit += sizeof(seed) * 4;
 	}
 	spin_unlock(&r->lock);
-#else
-	mix_pool_bytes(r, &fast_pool->pool, sizeof(fast_pool->pool), NULL);
-#endif
-
 
 	/*
 	 * If we don't have a valid cycle counter, and we see
@@ -995,12 +991,24 @@ static void extract_buf(struct entropy_store *r, __u8 *out)
 	int i;
 	union {
 		__u32 w[5];
-		unsigned long l[LONGS(EXTRACT_SIZE)];
+		unsigned long l[LONGS(20)];
 	} hash;
 	__u32 workspace[SHA_WORKSPACE_WORDS];
 	__u8 extract[64];
 	unsigned long flags;
 
+	/*
+	 * If we have a architectural hardware random number
+	 * generator, use it for SHA's initial vector 
+	 */
+	sha_init(hash.w);
+	for (i = 0; i < LONGS(20); i++) {
+		unsigned long v;
+		if (!arch_get_random_long(&v))
+			break;
+		hash.l[i] = v;
+	}
+
 	/* Generate a hash across the pool, 16 words (512 bits) at a time */
 	spin_lock_irqsave(&r->lock, flags);
 	for (i = 0; i < r->poolinfo->poolwords; i += 16)
@@ -1035,18 +1043,6 @@ static void extract_buf(struct entropy_store *r, __u8 *out)
 	hash.w[1] ^= hash.w[4];
 	hash.w[2] ^= rol32(hash.w[2], 16);
 
-	/*
-	 * If we have a architectural hardware random number
-	 * generator, use it for SHA's initial vector
-	 */
-	sha_init(hash.w);
-	for (i = 0; i < LONGS(EXTRACT_SIZE); i++) {
-		unsigned long v;
-		if (!arch_get_random_long(&v))
-			break;
-		hash.l[i] = v;
-	}
-
 	memcpy(out, &hash, EXTRACT_SIZE);
 	memzero_explicit(&hash, sizeof(hash));
 }
-- 
1.7.1

