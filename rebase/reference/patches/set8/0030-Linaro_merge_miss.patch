From f43cb25141d12ac0a7a87c649a46c75f68c247a8 Mon Sep 17 00:00:00 2001
From: jayesh <jayesh.babu@windriver,com>
Date: Tue, 8 Mar 2016 21:39:29 +0900
Subject: [PATCH 28/29] P32_0030-Linaro_merge_miss_rebase


diff --git a/arch/arm/common/bL_switcher.c b/arch/arm/common/bL_switcher.c
index 6ee60ca..6c3e566 100644
--- a/arch/arm/common/bL_switcher.c
+++ b/arch/arm/common/bL_switcher.c
@@ -192,9 +192,7 @@ static int bL_switch_to(unsigned int new_cluster_id)
 
 	/* Install our "inbound alive" notifier. */
 	init_completion(&inbound_alive);
-#if 0
 	ipi_nr = register_ipi_completion(&inbound_alive, this_cpu);
-#endif
 	ipi_nr |= ((1 << 16) << bL_gic_id[ob_cpu][ob_cluster]);
 	mcpm_set_early_poke(ib_cpu, ib_cluster, gic_get_sgir_physaddr(), ipi_nr);
 
diff --git a/arch/arm/include/asm/smp.h b/arch/arm/include/asm/smp.h
index d3a22be..13dbba8 100755
--- a/arch/arm/include/asm/smp.h
+++ b/arch/arm/include/asm/smp.h
@@ -80,6 +80,7 @@ extern void cpu_die(void);
 extern void arch_send_call_function_single_ipi(int cpu);
 extern void arch_send_call_function_ipi_mask(const struct cpumask *mask);
 extern void arch_send_wakeup_ipi_mask(const struct cpumask *mask);
+extern int register_ipi_completion(struct completion *completion, int cpu);
 
 struct smp_operations {
 #ifdef CONFIG_SMP
diff --git a/arch/arm/kernel/smp.c b/arch/arm/kernel/smp.c
index dedd0d7..6434996 100755
--- a/arch/arm/kernel/smp.c
+++ b/arch/arm/kernel/smp.c
@@ -66,6 +66,7 @@ enum ipi_msg_type {
 	IPI_CALL_FUNC,
 	IPI_CALL_FUNC_SINGLE,
 	IPI_CPU_STOP,
+	IPI_COMPLETION,
 };
 
 static DECLARE_COMPLETION(cpu_running);
@@ -470,6 +471,7 @@ static const char *ipi_types[NR_IPI] = {
 	S(IPI_CALL_FUNC, "Function call interrupts"),
 	S(IPI_CALL_FUNC_SINGLE, "Single function call interrupts"),
 	S(IPI_CPU_STOP, "CPU stop interrupts"),
+	S(IPI_COMPLETION, "completion interrupts"),
 };
 
 void show_ipi_list(struct seq_file *p, int prec)
@@ -595,6 +597,20 @@ static void ipi_cpu_stop(unsigned int cpu)
 		cpu_relax();
 }
 
+static DEFINE_PER_CPU(struct completion *, cpu_completion);
+
+int register_ipi_completion(struct completion *completion, int cpu)
+{
+	per_cpu(cpu_completion, cpu) = completion;
+	return IPI_COMPLETION;
+}
+
+static void ipi_complete(unsigned int cpu)
+{
+	complete(per_cpu(cpu_completion, cpu));
+}
+
+
 /*
  * Main handler for inter-processor interrupts
  */
@@ -645,6 +661,12 @@ void handle_IPI(int ipinr, struct pt_regs *regs)
 		irq_exit();
 		break;
 
+	case IPI_COMPLETION:
+		irq_enter();
+		ipi_complete(cpu);
+		irq_exit();
+		break;
+
 	default:
 		printk(KERN_CRIT "CPU%u: Unknown IPI message 0x%x\n",
 		       cpu, ipinr);
diff --git a/arch/arm/mach-mb86s70/mcpm.c b/arch/arm/mach-mb86s70/mcpm.c
index c88be03..7a0334f 100644
--- a/arch/arm/mach-mb86s70/mcpm.c
+++ b/arch/arm/mach-mb86s70/mcpm.c
@@ -456,7 +456,9 @@ static int mb86s70_pm_enter(suspend_state_t state)
 
 		}
 
+#if 0  /* gic_cpu_save 2 try -> delete */
 		cpu_pm_enter();
+#endif
 		cpu_suspend(0, mb86s70_die);
 		cpu_pm_exit();
 		break;
-- 
1.7.1

