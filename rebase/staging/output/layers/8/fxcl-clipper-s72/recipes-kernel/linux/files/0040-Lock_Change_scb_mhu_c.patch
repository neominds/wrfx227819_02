From e48fb28483ef9d4a8ee49de8dedaacceca36afce Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Thu, 16 Feb 2017 14:03:48 +0000
Subject: [PATCH 33/34] 0040-Lock_Change_scb_mhu_c


diff --git a/arch/arm/mach-mb86s70/scb_mhu.c b/arch/arm/mach-mb86s70/scb_mhu.c
index 5507938..55ea2a0 100644
--- a/arch/arm/mach-mb86s70/scb_mhu.c
+++ b/arch/arm/mach-mb86s70/scb_mhu.c
@@ -24,6 +24,7 @@
 #define SECURE		2
 
 #define TASKLET_USE
+#undef	LOCK_CHK
 
 int __initdata shm_offset = 0x800;
 
@@ -34,7 +35,7 @@ static void __iomem *rsp_to_scb = MB86S70_SHM_FROM_SCB_VIRT + 0x300;
 static mhu_handler_t handler[MHU_NUM_CMDS];
 static DEFINE_SPINLOCK(fsm_lock);
 #ifdef TASKLET_USE
-static DEFINE_SPINLOCK(got_data_lock);
+//static DEFINE_SPINLOCK(got_data_lock);
 #endif	/* TASKLET_USE */
 static LIST_HEAD(pending_xfers);
 static LIST_HEAD(free_xfers);
@@ -122,6 +123,139 @@ static int __init set_shm_offset(char *str)
 }
 __setup("shm_offset=", set_shm_offset);
 
+#ifdef	LOCK_CHK
+#define	DUMP_SIZE	64
+enum func_no {
+        MHU_HNDLR_SET = 0,
+        MHU_HNDLR_CLR,
+        MHU_SEND_PACKET,
+	DO_XFER,
+	GOT_DATA,
+	MAX_FUNCTION,
+};
+unsigned char	d_tracef	[DUMP_SIZE];
+unsigned int	d_tracef_cnt=0;
+unsigned char	d_mutex_set0=0;
+unsigned char	d_mutex_set1=0;
+unsigned char	d_mutex_clr0=0;
+unsigned char	d_mutex_clr1=0;
+unsigned char	d_mutex_pkt0=0;
+unsigned char	d_mutex_pkt1=0;
+unsigned char	d_got0=0;
+unsigned char	d_got1=0;
+unsigned char	d_fsm_set0=0;
+unsigned char	d_fsm_set1=0;
+unsigned char	d_fsm_clr0=0;
+unsigned char	d_fsm_clr1=0;
+unsigned char	d_fsm_pkt0=0;
+unsigned char	d_fsm_pkt1=0;
+unsigned char	d_fsm_xfer0=0;
+unsigned char	d_fsm_xfer1=0;
+
+void	d_mutex_lock(struct mutex * lock, int no)
+{
+	unsigned char	*tmp0, *tmp1;
+	switch ( no ) {
+		case MHU_HNDLR_SET:   {tmp0 = &d_mutex_set0; tmp1 = &d_mutex_set1;} break;
+		case MHU_HNDLR_CLR:   {tmp0 = &d_mutex_clr0; tmp1 = &d_mutex_clr1;} break;
+		case MHU_SEND_PACKET: {tmp0 = &d_mutex_pkt0; tmp1 = &d_mutex_pkt1;} break;
+	}
+	if ( *tmp0 == 0 ) {
+		*tmp0 = 1;
+		*tmp1 = 0;
+	} else {
+		if ( *tmp1 == 0 )
+			*tmp1 = 1;
+		else
+			pr_err("d_mutex_lock!\n");
+	}
+	mutex_lock(lock);
+	if ( *tmp1 != 0 ) {
+		*tmp1 = 2;
+	} else {
+		*tmp0 = 2;
+	}
+}
+void	d_mutex_unlock(struct mutex * lock, int no)
+{
+	unsigned char	*tmp0, *tmp1;
+	switch ( no ) {
+		case MHU_HNDLR_SET:   {tmp0 = &d_mutex_set0; tmp1 = &d_mutex_set1;} break;
+		case MHU_HNDLR_CLR:   {tmp0 = &d_mutex_clr0; tmp1 = &d_mutex_clr1;} break;
+		case MHU_SEND_PACKET: {tmp0 = &d_mutex_pkt0; tmp1 = &d_mutex_pkt1;} break;
+	}
+	mutex_unlock(lock);
+	if ( *tmp1 == 2 ) {
+		*tmp1 = 0;
+	} else {
+		if ( *tmp0 == 2 )
+			*tmp0 = 0;
+		else
+			pr_err("d_mutex_unlock!\n");
+	}
+}
+void	d_spin_lock_irqsave(spinlock_t *lock,unsigned long flags, int no)
+{
+	unsigned char	*tmp0, *tmp1;
+	switch ( no ) {
+		case GOT_DATA:        {tmp0 = &d_got0; tmp1 = &d_got1;} break;
+		case MHU_HNDLR_SET:   {tmp0 = &d_fsm_set0; tmp1 = &d_fsm_set1;} break;
+		case MHU_HNDLR_CLR:   {tmp0 = &d_fsm_clr0; tmp1 = &d_fsm_clr1;} break;
+		case MHU_SEND_PACKET: {tmp0 = &d_fsm_pkt0; tmp1 = &d_fsm_pkt1;} break;
+		case DO_XFER: {tmp0 = &d_fsm_xfer0; tmp1 = &d_fsm_xfer1;} break;
+	}
+	if ( *tmp0 == 0 ) {
+		*tmp0 = 1;
+		*tmp1 = 0;
+	} else {
+		if ( *tmp1 == 0 )
+			*tmp1 = 1;
+		else
+			pr_err("d_spin_lock_irqsave!\n");
+	}
+	spin_lock_irqsave(lock, flags);
+	if ( *tmp1 != 0 ) {
+		*tmp1 = 2;
+	} else {
+		*tmp0 = 2;
+	}
+}
+void	d_spin_unlock_irqrestore(spinlock_t *lock,unsigned long flags, int no)
+{
+	unsigned char	*tmp0, *tmp1;
+	switch ( no ) {
+		case GOT_DATA:        {tmp0 = &d_got0; tmp1 = &d_got1;} break;
+		case MHU_HNDLR_SET:   {tmp0 = &d_fsm_set0; tmp1 = &d_fsm_set1;} break;
+		case MHU_HNDLR_CLR:   {tmp0 = &d_fsm_clr0; tmp1 = &d_fsm_clr1;} break;
+		case MHU_SEND_PACKET: {tmp0 = &d_fsm_pkt0; tmp1 = &d_fsm_pkt1;} break;
+		case DO_XFER: {tmp0 = &d_fsm_xfer0; tmp1 = &d_fsm_xfer1;} break;
+	}
+	spin_unlock_irqrestore(lock, flags);
+	if ( *tmp1 == 2 ) {
+		*tmp1 = 0;
+	} else {
+		if ( *tmp0 == 2 )
+			*tmp0 = 0;
+		else
+			pr_err("d_spin_unlock_irqrestore!\n");
+	}
+}
+void	d_trace(int no)
+{
+	d_tracef[d_tracef_cnt] = no;
+	d_tracef_cnt++;
+	if ( d_tracef_cnt >=DUMP_SIZE )
+		d_tracef_cnt=0;
+	d_tracef[d_tracef_cnt]=0xee;
+	
+}
+#else
+#define	d_mutex_lock(a,b)		mutex_lock(a)
+#define	d_mutex_unlock(a,b)		mutex_unlock(a)
+#define	d_spin_lock_irqsave(a,b,c)	spin_lock_irqsave(a,b)
+#define	d_spin_unlock_irqrestore(a,b,c)	spin_unlock_irqrestore(a,b)
+#define	d_trace(a)
+#endif	/* LOCK_CHK */
 
 #ifdef TASKLET_USE
 static void got_data(u32 code);
@@ -168,17 +302,20 @@ static void got_data(u32 code)
 	mhu_handler_t hndlr = NULL;
 	int ev;
 
+	d_trace(GOT_DATA);
 	if (code & RESP_BIT)
 		ev = EV_RR;
 	else
 		ev = EV_RC;
 
 #ifdef	TASKLET_USE
-	spin_lock_irqsave(&got_data_lock, flags);
+	//d_spin_lock_irqsave(&got_data_lock, flags, GOT_DATA);
+	d_spin_lock_irqsave(&fsm_lock, flags, GOT_DATA);
 #endif	/* TASKLET_USE */
 	if (mhu_fsm[fsm_state][ev] == MHU_INVLD) {
 #ifdef	TASKLET_USE
-		spin_unlock_irqrestore(&got_data_lock, flags);
+		//d_spin_unlock_irqrestore(&got_data_lock, flags, GOT_DATA);
+		d_spin_unlock_irqrestore(&fsm_lock, flags, GOT_DATA);
 #endif	/* TASKLET_USE */
 		pr_err("State-%d EV-%d FSM Broken!\n", fsm_state, ev);
 		return;
@@ -202,7 +339,8 @@ static void got_data(u32 code)
 			pr_err("No handler for CMD_%u\n", code);
 	}
 #ifdef	TASKLET_USE
-	spin_unlock_irqrestore(&got_data_lock, flags);
+	//d_spin_unlock_irqrestore(&got_data_lock, flags, GOT_DATA);
+	d_spin_unlock_irqrestore(&fsm_lock, flags, GOT_DATA);
 #endif	/* TASKLET_USE */
 }
 
@@ -264,12 +402,13 @@ static int do_xfer(void)
 	int ev;
 	int code;
 
+	d_trace(DO_XFER);
 	if (skip_mhu) {
 		WARN_ON(1);
 		return 0;
 	}
 
-	spin_lock_irqsave(&fsm_lock, flags);
+	d_spin_lock_irqsave(&fsm_lock, flags, DO_XFER);
 	if (list_empty(&pending_xfers)) {
 		void *_ch = NULL;
 		int cmd;
@@ -278,12 +417,12 @@ static int do_xfer(void)
 			;
 		/* Don't free channel if any user is listening */
 		if (cmd != MHU_NUM_CMDS) {
-			spin_unlock_irqrestore(&fsm_lock, flags);
+			d_spin_unlock_irqrestore(&fsm_lock, flags, DO_XFER);
 			return 0;
 		}
 
 		if (ax != NULL) {
-			spin_unlock_irqrestore(&fsm_lock, flags);
+			d_spin_unlock_irqrestore(&fsm_lock, flags, DO_XFER);
 			return 1;
 		}
 
@@ -292,7 +431,7 @@ static int do_xfer(void)
 			mhu_chan = NULL;
 		}
 
-		spin_unlock_irqrestore(&fsm_lock, flags);
+		d_spin_unlock_irqrestore(&fsm_lock, flags, DO_XFER);
 
 		if (_ch)
 			ipc_free_channel(_ch);
@@ -305,7 +444,7 @@ static int do_xfer(void)
 
 	ev = code & RESP_BIT ? EV_LR : EV_LC;
 	if (mhu_fsm[fsm_state][ev] == MHU_INVLD) {
-		spin_unlock_irqrestore(&fsm_lock, flags);
+		d_spin_unlock_irqrestore(&fsm_lock, flags, DO_XFER);
 		mbox_dbg("%s:%d\n", __func__, __LINE__);
 		return 1;
 	}
@@ -323,7 +462,7 @@ static int do_xfer(void)
 		list_move(&x->node, &free_xfers);
 	fsm_state = mhu_fsm[fsm_state][ev];
 
-	spin_unlock_irqrestore(&fsm_lock, flags);
+	d_spin_unlock_irqrestore(&fsm_lock, flags, DO_XFER);
 
 	/* Prefer mailbox API */
 	if ((!mhu_chan) && (!irqs_disabled())) {
@@ -440,16 +579,17 @@ int mhu_hndlr_set(u32 cmd, mhu_handler_t hndlr)
 	unsigned long flags;
 	int ret = -EINVAL;
 
-#if 0  /* WR Del */
-	mutex_lock(&mhu_mutex);
+	d_trace(MHU_HNDLR_SET);
+#if 1  /* WR Del */
+	d_mutex_lock(&mhu_mutex, MHU_HNDLR_SET);
 #endif
 
-	spin_lock_irqsave(&fsm_lock, flags);
+	d_spin_lock_irqsave(&fsm_lock, flags, MHU_HNDLR_SET);
 	if (cmd < MHU_NUM_CMDS && !handler[cmd]) {
 		ret = 0;
 		handler[cmd] = hndlr;
 	}
-	spin_unlock_irqrestore(&fsm_lock, flags);
+	d_spin_unlock_irqrestore(&fsm_lock, flags, MHU_HNDLR_SET);
 
 	if (!mhu_chan) {
 		void *_ch;
@@ -462,8 +602,8 @@ int mhu_hndlr_set(u32 cmd, mhu_handler_t hndlr)
 			mhu_chan = _ch;
 	}
 
-#if 0  /* WR Del */
-	mutex_unlock(&mhu_mutex);
+#if 1  /* WR Del */
+	d_mutex_unlock(&mhu_mutex, MHU_HNDLR_SET);
 #endif
 
 	return ret;
@@ -474,11 +614,12 @@ void mhu_hndlr_clr(u32 cmd, mhu_handler_t hndlr)
 {
 	unsigned long flags;
 
-#if 0  /* WR Del */
-	mutex_lock(&mhu_mutex);
+	d_trace(MHU_HNDLR_CLR);
+#if 1  /* WR Del */
+	d_mutex_lock(&mhu_mutex, MHU_HNDLR_CLR);
 #endif
 
-	spin_lock_irqsave(&fsm_lock, flags);
+	d_spin_lock_irqsave(&fsm_lock, flags, MHU_HNDLR_CLR);
 
 	if (cmd < MHU_NUM_CMDS && handler[cmd] == hndlr)
 		handler[cmd] = NULL;
@@ -490,9 +631,9 @@ void mhu_hndlr_clr(u32 cmd, mhu_handler_t hndlr)
 			;
 		/* Don't free channel if any user is listening */
 		if (cmd != MHU_NUM_CMDS) {
-			spin_unlock_irqrestore(&fsm_lock, flags);
-#if 0  /* WR Del */
-			mutex_unlock(&mhu_mutex);
+			d_spin_unlock_irqrestore(&fsm_lock, flags, MHU_HNDLR_CLR);
+#if 1  /* WR Del */
+			d_mutex_unlock(&mhu_mutex, MHU_HNDLR_CLR);
 #endif
 			return;
 		}
@@ -502,17 +643,20 @@ void mhu_hndlr_clr(u32 cmd, mhu_handler_t hndlr)
 			mhu_chan = NULL;
 		}
 
-		spin_unlock_irqrestore(&fsm_lock, flags);
+		d_spin_unlock_irqrestore(&fsm_lock, flags, MHU_HNDLR_CLR);
 
 		if (_ch)
 			ipc_free_channel(_ch);
 
+#if 1  /* WR Add */
+		d_mutex_unlock(&mhu_mutex, MHU_HNDLR_CLR);
+#endif
 		return;
 	}
-	spin_unlock_irqrestore(&fsm_lock, flags);
+	d_spin_unlock_irqrestore(&fsm_lock, flags, MHU_HNDLR_CLR);
 
-#if 0  /* WR Del */
-	mutex_unlock(&mhu_mutex);
+#if 1  /* WR Del */
+	d_mutex_unlock(&mhu_mutex, MHU_HNDLR_CLR);
 #endif
 
 }
@@ -524,25 +668,26 @@ int mhu_send_packet(int code, void *buf, int len, struct completion *c)
 	unsigned long flags;
 	int ret;
 
+	d_trace(MHU_SEND_PACKET);
 	if (code & ~0xff) {
 		WARN_ON(1);
 		return -EINVAL;
 	}
 
-	mutex_lock(&mhu_mutex);
+	d_mutex_lock(&mhu_mutex, MHU_SEND_PACKET);
 	if ((code & RESP_BIT) &&
 		fsm_state != MHU_WRRL && fsm_state != MHU_WRL) {
 		WARN_ON(1);
-		mutex_unlock(&mhu_mutex);
+		d_mutex_unlock(&mhu_mutex, MHU_SEND_PACKET);
 		return -EINVAL;
 	}
 
-	spin_lock_irqsave(&fsm_lock, flags);
+	d_spin_lock_irqsave(&fsm_lock, flags, MHU_SEND_PACKET);
 
 	if (list_empty(&free_xfers) && mhu_alloc_xfers(5, &free_xfers)) {
-		spin_unlock_irqrestore(&fsm_lock, flags);
+		d_spin_unlock_irqrestore(&fsm_lock, flags, MHU_SEND_PACKET);
 		mbox_dbg("%s:%d OOM\n", __func__, __LINE__);
-		mutex_unlock(&mhu_mutex);
+		d_mutex_unlock(&mhu_mutex, MHU_SEND_PACKET);
 		return -EAGAIN;
 	}
 
@@ -557,11 +702,11 @@ int mhu_send_packet(int code, void *buf, int len, struct completion *c)
 	else
 		list_move_tail(&x->node, &pending_xfers);
 
-	spin_unlock_irqrestore(&fsm_lock, flags);
+	d_spin_unlock_irqrestore(&fsm_lock, flags, MHU_SEND_PACKET);
 
 	ret = do_xfer();
 
-	mutex_unlock(&mhu_mutex);
+	d_mutex_unlock(&mhu_mutex, MHU_SEND_PACKET);
 
 	return ret;
 }
-- 
1.7.9.5

